{"version":3,"sources":["component/Card.jsx","component/ExpenseDate.jsx","component/ExpenseItem.js","component/Chart/ChartBar.jsx","component/Chart/Chart.js","component/ExpensesChart.jsx","component/NewExpense/ExpenseFilter.jsx","component/Expenses.jsx","component/NewExpense/ExpenseForm.jsx","component/NewExpense/NewExpense.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","classes","className","children","ExpenseDate","date","month","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ChartBar","barFillHeight","maxValue","Math","round","value","style","height","label","Chart","dataPointValues","dataPoints","map","dataPoint","totalMaxiumum","max","ExpensesChart","chartDataPoints","expenses","expense","getMonth","ExpenseFilter","selected","onChange","e","onChangeFilter","target","Expenses","items","useState","filteredYear","setFilteredYear","filteredExpenses","filter","item","toString","selectedYear","length","id","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","type","min","step","onClick","preventDefault","expenseData","Date","onSaveExpenseData","NewExpense","enteredExpenseData","random","onAddExpense","App","setExpenses","prevExp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.886742c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Card.css\";\r\nconst Card = (props) => {\r\n  const classes = \"card \" + props.className; //props.className will get all the classes from outside of the component like that used in ExpenseItem.js (className=\"expense-item\")\r\n  return <div className={classes}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./ExpenseDate.css\";\r\nconst ExpenseDate = ({ date }) => {\r\n  const month = date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = date.getFullYear();\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-month\">{month}</div>\r\n      <div className=\"expense-year\">{year}</div>\r\n      <div className=\"expense-day\">{day}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseDate;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseItem.css\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport Card from \"./Card\";\r\nconst ExpenseItem = (props) => {\r\n  return (\r\n    <Card className=\"expense-item\">\r\n      <ExpenseDate date={props.date} />\r\n      <div className=\"expense-item__description\">\r\n        <h2>{props.title}</h2>\r\n        <div className=\"expense-item__price\">${props.amount}</div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import React from \"react\";\r\nimport \"./ChartBar.css\";\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n  return (\r\n    <div className=\"char-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: barFillHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n ","import React from \"react\";\r\nimport \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\nconst Chart = (props) => {\r\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\r\n  const totalMaxiumum = Math.max(...dataPointValues);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => {\r\n        return (\r\n          <ChartBar\r\n            value={dataPoint.value}\r\n            maxValue={totalMaxiumum}\r\n            label={dataPoint.label}\r\n            key={dataPoint.label}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"./Chart/Chart\";\r\n\r\nconst ExpensesChart = (props) => {\r\n  const chartDataPoints = [\r\n    {\r\n      label: \"Jan\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Feb\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Mar\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"April\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"May\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"June\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"July\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Aug\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Sep\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Oct\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Nov\",\r\n      value: 0,\r\n    },\r\n    {\r\n      label: \"Dec\",\r\n      value: 0,\r\n    },\r\n  ];\r\n\r\n  for (const expense of props.expenses) {\r\n    const expenseMonth = expense.date.getMonth(); //jan==0\r\n    chartDataPoints[expenseMonth].value += expense.amount;\r\n  }\r\n  return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import React from \"react\";\r\nimport \"./ExpenseFilter.css\";\r\nconst ExpenseFilter = (props) => {\r\n  const dropDownChangeHandler = (e) => {\r\n    props.onChangeFilter(e.target.value);\r\n  };\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={dropDownChangeHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseFilter;\r\n","import React, { useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport \"./Expenses.css\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nimport ExpenseFilter from \"./NewExpense/ExpenseFilter\";\r\n\r\nconst Expenses = ({ items }) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = items.filter((item) => {\r\n    return item.date.getFullYear().toString() === filteredYear;\r\n  });\r\n  return (\r\n    <Card className=\"expenses\">\r\n      <ExpenseFilter\r\n        selected={filteredYear}\r\n        onChangeFilter={filterChangeHandler}\r\n      />\r\n      <ExpensesChart expenses={filteredExpenses} />\r\n      {filteredExpenses.length === 0 ? (\r\n        <p>No expenses found</p>\r\n      ) : (\r\n        filteredExpenses.map((item) => {\r\n          return (\r\n            <ExpenseItem\r\n              title={item.title}\r\n              amount={item.amount}\r\n              date={item.date}\r\n              key={item.id}\r\n            />\r\n          );\r\n        })\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  //   const [userInput, setUserInput] = useState({\r\n  //     enteredTitle: \"\",\r\n  //     enteredAmount: \"\",\r\n  //     enteredDate: \"\",\r\n  //   });\r\n\r\n  const titleChangeHandler = (e) => {\r\n    setEnteredTitle(e.target.value); //best practice\r\n    // --------------------------------\r\n    // do not use below approach\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredTitle: e.target.value,\r\n    // });\r\n    // ---------------------------------best practice below----------------\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredTitle: e.target.value };\r\n    // });\r\n  };\r\n  const amountChangeHandler = (e) => {\r\n    setEnteredAmount(e.target.value); //best practice\r\n    // ----------------------------------------\r\n    // do not use below approach\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredAmount: e.target.value,\r\n    // });\r\n    // ---------------------------------best practice below\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredAmount: e.target.value };\r\n    // });\r\n  };\r\n\r\n  const dateChangeHandler = (e) => {\r\n    setEnteredDate(e.target.value); //best practice\r\n    // ---------------------------\r\n    // do not use below approach\r\n    // setUserInput({\r\n    //   ...userInput,\r\n    //   enteredDate: e.target.value,\r\n    // });\r\n    // --------------------------------- best practice below\r\n    // setUserInput((prevState) => {\r\n    //   return { ...prevState, enteredDate: e.target.value };\r\n    // });\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n    props.onSaveExpenseData(expenseData);\r\n    // console.log(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n  return (\r\n    <form>\r\n      <div className=\"new-expense_controls\">\r\n        <div className=\"new-expense_control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={titleChangeHandler}\r\n            value={enteredTitle}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense_control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n            value={enteredAmount}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense_control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n            value={enteredDate}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense_actions\">\r\n        <button type=\"submit\" onClick={submitHandler}>\r\n          Add Expense\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\n\r\nconst NewExpense = (props) => {\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    // console.log(expenseData);\r\n    props.onAddExpense(expenseData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","// import ExpenseItem from \"./component/ExpenseItem\";\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Expenses from \"./component/Expenses\";\nimport NewExpense from \"./component/NewExpense/NewExpense\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  {\n    id: \"e2\",\n    title: \"New TV\",\n    amount: 500.12,\n    date: new Date(20201, 9, 10),\n  },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 41.25,\n    date: new Date(2018, 4, 3),\n  },\n  {\n    id: \"e4\",\n    title: \"Rent\",\n    amount: 850.25,\n    date: new Date(2021, 4, 23),\n  },\n];\nfunction App() {\n  const [expenses, setExpenses] = useState([]);\n  const addExpenseHandler = (expense) => {\n    setExpenses((prevExp) => {\n      return [expense, ...prevExp];\n    });\n  };\n  return (\n    <div>\n      <NewExpense onAddExpense={addExpenseHandler} />\n      <Expenses items={expenses} />\n\n      {/* <ExpenseItem\n        title={expenses[0].title}\n        amount={expenses[0].amount}\n        date={expenses[0].date}\n      />\n      <ExpenseItem\n        title={expenses[1].title}\n        amount={expenses[1].amount}\n        date={expenses[1].date}\n      />\n      <ExpenseItem\n        title={expenses[2].title}\n        amount={expenses[2].amount}\n        date={expenses[2].date}\n      />\n      <ExpenseItem\n        title={expenses[3].title}\n        amount={expenses[3].amount}\n        date={expenses[3].date}\n      /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}